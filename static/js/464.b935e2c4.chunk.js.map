{"version":3,"file":"static/js/464.b935e2c4.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.js","pages/LoginPage.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Field, Form as FormikForm } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  margin-top: 20px;\n  width: 300px;\n  margin: 0 auto;\n  box-shadow: 0 0 0 2px #cbc3e3, 8px 8px 0 0 #cbc3e3;\n`;\n\nexport const Label = styled.label`\n  padding: 0 5px;\n  opacity: 0.8;\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  pointer-events: none;\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  align-items: end;\n  padding: 20px 20px 0;\n  justify-content: baseline;\n  gap: 15px;\n`;\n\nexport const StyledField = styled(Field)`\n  margin-left: 5px;\n  padding: 8px;\n  background: transparent;\n  border: 2px solid #e5e0ff;\n  border-radius: 5px;\n  font-size: 16px;\n  max-width: 190px;\n\n  :focus {\n    outline: 1px solid #7286d3;\n  }\n\n  &.error {\n    border-color: tomato;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  padding: 10px 30px;\n  margin: 0 auto 20px;\n  font-size: 16px;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  background-color: #8ea7e9;\n  cursor: pointer;\n  transition: background-color 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  :hover,\n  :focus {\n    background-color: #7286d3;\n  }\n`;\n\nexport const LabelContainer = styled.div`\n  position: relative;\n`;\n\nexport const Error = styled.span`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: center;\n  align-items: center;\n  color: tomato;\n  text-align: start;\n  width: 230px;\n  font-size: 16px;\n  gap: 5px;\n  width: 100%;\n`;\n","import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { BiErrorCircle } from 'react-icons/bi';\nimport {\n  InputContainer,\n  Button,\n  StyledField,\n  LabelContainer,\n  Form,\n  Error,\n} from './LoginForm.styled';\n\nconst logInSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(6, 'Password must be at least 6 characters long'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = values => {\n    dispatch(\n      logIn({\n        email: values.email,\n        password: values.password,\n      })\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', email: '', password: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={logInSchema}\n    >\n      {props => {\n        return (\n          <Form>\n            <InputContainer>\n              <LabelContainer>\n                <div\n                  style={{\n                    display: 'flex',\n                    wtap: 'nowrap',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                  }}\n                >\n                  <label htmlFor=\"email\">Email</label>\n                  <StyledField\n                    id=\"email\"\n                    type=\"email\"\n                    name=\"email\"\n                    required\n                    placeholder=\"nugget@gmail.com\"\n                    value={props.values.number}\n                    onChange={props.handleChange}\n                    className={\n                      props.touched.email && props.errors.email ? 'error' : ''\n                    }\n                  />\n                </div>\n                <ErrorMessage name=\"email\">\n                  {msg => (\n                    <Error>\n                      <BiErrorCircle /> {msg}\n                    </Error>\n                  )}\n                </ErrorMessage>\n              </LabelContainer>\n              <LabelContainer>\n                <div\n                  style={{\n                    display: 'flex',\n                    wtap: 'nowrap',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                  }}\n                >\n                  <label htmlFor=\"password\">Password</label>\n                  <StyledField\n                    id=\"password\"\n                    type=\"password\"\n                    name=\"password\"\n                    required\n                    placeholder=\"******\"\n                    value={props.values.password}\n                    onChange={props.handleChange}\n                    className={\n                      props.touched.password && props.errors.password\n                        ? 'error'\n                        : ''\n                    }\n                  />\n                </div>\n                <ErrorMessage name=\"password\">\n                  {msg => (\n                    <Error>\n                      <BiErrorCircle /> {msg}\n                    </Error>\n                  )}\n                </ErrorMessage>\n              </LabelContainer>\n              <Button type=\"submit\">Log In</Button>\n            </InputContainer>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function LoginPage() {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n}\n"],"names":["Form","styled","FormikForm","_templateObject","_taggedTemplateLiteral","InputContainer","_templateObject2","_templateObject3","StyledField","Field","_templateObject4","Button","_templateObject5","LabelContainer","_templateObject6","Error","_templateObject7","logInSchema","Yup","shape","email","required","password","min","LoginForm","dispatch","useDispatch","_jsx","Formik","initialValues","name","onSubmit","values","logIn","validationSchema","children","props","_jsxs","style","display","wtap","justifyContent","alignItems","htmlFor","id","type","placeholder","value","number","onChange","handleChange","className","touched","errors","ErrorMessage","msg","BiErrorCircle","LoginPage","Helmet"],"sourceRoot":""}